{"version":3,"sources":["components/card/card.js","components/card-list/card-list.js","components/search-box/search-box.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","monster","id","name","className","alt","src","email","CardList","monsters","map","SearchBox","type","placeholder","onChange","handler","App","state","searchFiled","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","event","target","value","console","log","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ySAoBeA,G,kBAjBF,SAACC,GAUV,OARwB,IAArBA,EAAMC,QAAQC,GAEbF,EAAMC,QAAQE,KAAO,kBAEI,IAArBH,EAAMC,QAAQC,KAElBF,EAAMC,QAAQE,KAAO,mBAEjB,sBAAKC,UAAU,OAAf,UACR,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BN,EAAMC,QAAQC,GAAxC,4BACtB,6BAA4BF,EAAMC,QAAQE,MAAjCH,EAAMC,QAAQC,IACvB,4BAAIF,EAAMC,QAAQM,aCPPC,EALE,SAACR,GAAD,OAEb,qBAAKI,UAAU,WAAf,SAA2BJ,EAAMS,SAASC,KAAI,SAACT,GAAD,OAAa,cAAC,EAAD,CAAMA,QAASA,UCC/DU,G,MAJG,SAACX,GAAD,OACd,uBAAOI,UAAU,SAASQ,KAAK,SAASC,YAAab,EAAMa,YAAaC,SAAUd,EAAMe,YCsC7EC,E,kDAnCb,aACC,IAAD,8BACE,gBAEKC,MACL,CACER,SAAW,GACXS,YAAc,IANlB,E,gEAWC,IAAD,OACEC,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC7EF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACf,SAASc,S,+BAIxC,IAAD,SACiCE,KAAKR,MAA7BR,EADT,EACSA,SAASS,EADlB,EACkBA,YAEVQ,EAAmBjB,EAASkB,QAAO,SAAC1B,GAAD,OACzCA,EAAQE,KAAKyB,cAAcC,SAASX,EAAYU,kBAEhD,OACE,sBAAKxB,UAAU,OAAf,UACE,oBAAIA,UAAU,KAAd,6BACA,cAAC,EAAD,CAAWS,YAAY,kBAAkBE,QAAS,SAAAe,GAAU,EAAKN,SAAS,CAACN,YAAYY,EAAMC,OAAOC,QAAO,kBAAIC,QAAQC,IAAIJ,EAAMC,OAAOC,aACxI,cAAC,EAAD,CAAUvB,SAAUiB,W,GA9BVS,IAAMC,WCOTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.9b694a0e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.css';\r\n\r\nconst Card = (props) =>\r\n{\r\n    if(props.monster.id === 1)\r\n    {\r\n        props.monster.name = 'Manjiri Ghawade';\r\n    }\r\n    else if(props.monster.id === 2)\r\n    {\r\n        props.monster.name = 'Ashutosh Pawade'\r\n    }\r\n    return (<div className='card'>\r\n    <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n    <h1 key={props.monster.id}>{props.monster.name}</h1>\r\n    <p>{props.monster.email}</p>\r\n    </div>);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport './card-list.css';\r\nimport Card from '../card/card';\r\n\r\nconst CardList = (props) =>\r\n(\r\n    <div className='cardList'>{props.monsters.map((monster) => <Card monster={monster}></Card>)}</div>\r\n)\r\n\r\nexport default CardList;","import React from 'react';\r\nimport './search-box.css'\r\n\r\nconst SearchBox = (props) => (\r\n    <input className='search' type='search' placeholder={props.placeholder} onChange={props.handler} />\r\n)\r\n\r\nexport default SearchBox;","import React from 'react';\nimport './App.css';\nimport CardList from './components/card-list/card-list';\nimport SearchBox from './components/search-box/search-box';\n\nclass App extends React.Component\n{\n  constructor()\n  {\n    super();\n\n    this.state=\n    {\n      monsters : [],\n      searchFiled : '',\n    }\n  }\n\n  componentDidMount()\n  {\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json())\n    .then(users => this.setState({monsters:users}));\n  }\n\n  render()\n  {\n    const {monsters,searchFiled} = this.state\n\n    const filteredMonsters = monsters.filter((monster) => \n    monster.name.toLowerCase().includes(searchFiled.toLowerCase()))\n\n    return(\n      <div className='Main'>\n        <h1 className='h1'>Monster Academy</h1>\n        <SearchBox placeholder='search monsters' handler={event => {this.setState({searchFiled:event.target.value},()=>console.log(event.target.value))} }></SearchBox>\n        <CardList monsters={filteredMonsters}>\n        </CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}